import sys
import os
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context

# üëâ Agregamos la ruta ra√≠z al sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# üîß Importamos nuestras configuraciones y modelos
from app.core.config import settings
from app.db.base import Base
from app import models  # ¬°Importante para registrar todos los modelos!

# Configuraci√≥n de Alembic
config = context.config

# ‚õΩ Usamos la URL desde el archivo .env
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)

# Configuraci√≥n de logs
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# üëâ Esta metadata es usada por 'autogenerate' para saber qu√© debe crear
target_metadata = Base.metadata

def run_migrations_offline():
    """Ejecuta migraciones sin conectar a la base."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    """Ejecuta migraciones con conexi√≥n activa."""
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,  # detecta cambios de tipo (opcional)
        )

        with context.begin_transaction():
            context.run_migrations()

# üîÅ Ejecuta offline u online seg√∫n contexto
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
